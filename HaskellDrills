{-# OPTIONS_GHC -Wno-overlapping-patterns #-}
import Data.Time.Calendar (Day)
-- Seth Michael Johnston

{- Basic Haskell Drills -}

-- myReverse: given a list as a parameter, reverse it and return the reversed list (recursive)
myReverse :: [a] -> [a]  -- Non-specific type
myReverse [] = []  -- the reverse of an empty list is still empty  
myReverse (x:xs) = myReverse xs ++ [x]  -- reverse the rest of the list given and append the first element at the end of the reversed list

-- isElement: judge if a value is an element in a list. If yes return True, else return False (recursive)

isElement :: Eq a => a -> [a] -> Bool  -- element and list provided by user
isElement a [] = False
isElement _ [a] = False
isElement a (x:xs) = a == x || isElement a xs



-- duplicate: duplicate the elements of a list. [1,2] --> [1,1,2,2] (recursive) 
duplicate :: [a] -> [a]
duplicate [] = []
duplicate (x:xs) = x : x : duplicate xs  -- x : x is you placing the duplicate of x

-- removeDuplicate: given a sorted list, remove the duplicated elements in the list (recursive) 

removeDuplicate :: [Int] -> [Int]
removeDuplicate [] = []
removeDuplicate (x:xs)
    | xs == [] = x : xs
    | x == num = removeDuplicate xs
    | otherwise = x : removeDuplicate xs
    where num = head xs


-- rotate: rotate a list n places to the left, where n is an integer

rotate :: [a] -> Int -> [a]
rotate [] _ = []  -- empty list
rotate xs n = take (length xs) (drop n (cycle xs))  -- take returns the first length of xs values in drop n (cycle xs) list; drop removes the first n values from a list

-- flatten: returns a list of lists into a single list formed by concatenation [[1,2], [3,4], [5,6]] returns [1,2,3,4,5,6] (recursive)

flatten :: [[a]] -> [a]
flatten = foldr (++) []

-- isPalindrome: given a list judge if it is a palindrome

isPalindrome :: Eq a => [a] -> Bool
isPalindrome x = x == myReverse x

-- coprime: given two positive integer numbers, determine whether they are coprime, where their greatest common divisor is 1 (recursive)
myGCD :: Integer -> Integer -> Integer
myGCD a b
      | b == 0     = abs a
      | otherwise  = myGCD b (a `mod` b)

coprime a b = myGCD a b == 1

{- Aaah! -}
 -- this functions gets the number of As and is used as a helper function for seeDoctor
numOfA :: [a] -> Int
numOfA x = length (init x)

charCheck :: String -> Bool
charCheck x = 'a' `elem` x && last x == 'h'



seeDoctor :: String -> String -> Bool
seeDoctor _ y = False
seeDoctor x _ = False
seeDoctor [] [] = False
seeDoctor x y = (numOfA y >= numOfA x) && charCheck x && charCheck y


{- Water Gates -}

-- At first, the gates are [closed, closed, closed, closed].
-- After the first day, the gates are [open, open, open, open].
-- After the second day, the gates are [open, closed, open, closed].
-- After the third day, the gates are [open, closed, closed, closed]. 
-- After the fourth day, the gates are [open, closed, closed, open]. 
-- So you should return 2, because there are two gates open.

-- list0 = [closed, closed, closed, closed]  -- 0
-- list1 = [open, closed, open, closed]  -- 
-- list2 = [open, closed, closed, open]
-- list3 = [open, closed, closed, closed]
-- list4 = [open, closed, closed, open]

waterGate :: Int -> Int
waterGate day
    | day == 0 = 0
    | day `mod` 4 == 0 = 2
    | day `mod` 4 == 1 = 1
    | day `mod` 4 == 2 = 2
    | day `mod` 4 == 3 = 2
    | otherwise = 0


{- Goldbach's Other Conjecture -}

isqrt :: Int -> Int
isqrt = floor . sqrt . fromIntegral

calc1 :: Int -> Int
calc1 x = isqrt (x `div` 2)

oddList = [1,3..]

isPrime 1 = False
isPrime n = [] == [x | x <- [2..(n-1)], mod n x == 0]

listOfPrimes = [k | k <- [2..], isPrime k]


goldbachNum :: Int -> Bool
goldbachNum x = isPrime (calc1 x) 
